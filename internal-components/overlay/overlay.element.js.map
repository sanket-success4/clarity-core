{"version":3,"file":"overlay.element.js","sourceRoot":"","sources":["../../../../src/internal-components/overlay/overlay.element.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {\n  baseStyles,\n  createId,\n  CdsBaseFocusTrap,\n  event,\n  EventEmitter,\n  FocusTrapTracker,\n  internalProperty,\n  onKey,\n  property,\n} from '@cds/core/internal';\nimport { html, query } from 'lit-element';\nimport { styles } from './overlay.element.css.js';\n\nexport function isNestedOverlay(myId: string, overlayPrefix: string, trapIds: string[]): boolean {\n  const overlayIds = trapIds.filter(id => id.indexOf(overlayPrefix) > -1);\n  return overlayIds.indexOf(myId) > 0; // id is present and not the first one...\n}\n\nexport function overlayIsActive(overlayId: string, focusTrapService = FocusTrapTracker) {\n  return focusTrapService.getCurrentTrapId() === overlayId;\n}\n\ntype CloseChangeSources = 'backdrop-click' | 'escape-keypress' | 'close-button-click' | 'custom';\n\n/**\n *\n * ```typescript\n * import '@cds/core/internal-components/overlay/register.js';\n * ```\n *\n * ```html\n * <cds-internal-overlay>\n *  <section cds-layout=\"vertical align:horizontal-stretch\">\n *    <div cds-layout=\"vertical pad:md gap:md\">\n *      <h2 cds-text=\"display\">A Title</h2>\n *      <div>\n *        <p cds-text=\"body\">\n *          Content inside a generic overlay.\n *        </p>\n *      </div>\n *    </div>\n *  </section>\n * </cds-internal-overlay>\n * ```\n *\n * @beta\n * @element cds-internal-overlay\n * @slot - Content slot for the content inside the overlay's panel\n * @event closeChange - Notify user when close event has occurred\n * @cssprop --backdrop-background\n * @cssprop --layered-backdrop-background\n */\nexport class CdsInternalOverlay extends CdsBaseFocusTrap {\n  @property({ type: String })\n  ariaModal = 'true';\n\n  @property({ type: String })\n  role = 'dialog';\n\n  // renderRoot needs delegatesFocus so that focus can cross the shadowDOM\n  // inside an element with aria-modal set to true\n  protected createRenderRoot(): Element | ShadowRoot {\n    return this.attachShadow({ mode: 'open', delegatesFocus: true });\n  }\n\n  private overlayIdPrefix = '_overlay-';\n\n  @event() protected closeChange: EventEmitter<CloseChangeSources>;\n\n  @internalProperty({ type: Boolean })\n  protected isLayered = false;\n\n  @query('.overlay-backdrop') protected backdrop: HTMLElement;\n\n  firstUpdated(props: Map<string, any>) {\n    super.firstUpdated(props);\n    this.backdrop.addEventListener('click', this.fireEventOnBackdropClick);\n  }\n\n  updated(props: Map<string, any>) {\n    super.updated(props);\n    const oldLayered = this.isLayered;\n    const isNested = isNestedOverlay(this.focusTrapId, this.overlayIdPrefix, FocusTrapTracker.getTrapIds());\n    const newLayered = this.focusTrap.active && isNested;\n\n    if (oldLayered !== newLayered) {\n      this.isLayered = newLayered;\n      this.requestUpdate('isLayered', oldLayered);\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('keydown', this.fireEventOnEscape);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener('keydown', this.fireEventOnEscape);\n    this.backdrop.removeEventListener('click', this.fireEventOnBackdropClick);\n  }\n\n  constructor() {\n    super();\n\n    // override focus-trap base id so we know this is an overlay\n    this.focusTrapId = createId(this.overlayIdPrefix);\n  }\n\n  closeOverlay(trigger: CloseChangeSources = 'custom') {\n    this.closeChange.emit(trigger);\n  }\n\n  protected get backdropTemplate() {\n    return html`<div\n      class=\"${this.isLayered ? 'overlay-backdrop layered' : 'overlay-backdrop'}\"\n      aria-hidden=\"true\"\n    ></div>`;\n  }\n\n  protected render() {\n    return html`\n      ${this.backdropTemplate}\n      <div class=\"private-host\" tabindex=\"-1\" aria-modal=\"true\" role=\"dialog\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  get overlayIsActive() {\n    return FocusTrapTracker.getCurrentTrapId() === this.focusTrapId;\n  }\n\n  protected fireEventOnBackdropClick = () => {\n    if (overlayIsActive(this.focusTrapId)) {\n      this.closeOverlay('backdrop-click');\n    }\n  };\n\n  protected fireEventOnEscape = (e: KeyboardEvent) => {\n    if (overlayIsActive(this.focusTrapId)) {\n      onKey('escape', e, () => {\n        this.closeOverlay('escape-keypress');\n      });\n    }\n  };\n\n  static get styles() {\n    return [baseStyles, styles];\n  }\n}\n"]}